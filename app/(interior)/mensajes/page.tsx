"use client"

import { useState } from "react"
import PageHeader from "@/components/page-header"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { PenTool, Search, X, Shuffle, BookOpen } from "lucide-react"
import MessageCard from "@/components/message-card"
import MessageViewer from "@/components/message-viewer"
import MessageEditor from "@/components/message-editor"

interface Message {
  id: number
  title: string
  content: string
  date: string
  category: "amor" | "motivacion" | "recuerdo" | "futuro" | "especial"
  isRead: boolean
}

export default function MensajesPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      title: "Para mi amor eterno",
      content: `Mi querido amor,

Cada d√≠a que pasa a tu lado es un regalo que atesoro con todo mi coraz√≥n. Desde el momento en que nuestros ojos se encontraron por primera vez, supe que mi vida hab√≠a cambiado para siempre.

Eres la melod√≠a que alegra mis ma√±anas, la luz que ilumina mis d√≠as m√°s oscuros y la paz que abraza mis noches. En tus brazos he encontrado mi hogar, en tu sonrisa mi felicidad, y en tu amor mi raz√≥n de ser.

Gracias por ser mi compa√±era, mi confidente, mi mejor amiga y el amor de mi vida. Cada momento contigo es una p√°gina hermosa en el libro de nuestra historia.

Te amo m√°s de lo que las palabras pueden expresar, m√°s de lo que el tiempo puede medir, y m√°s de lo que mi coraz√≥n puede contener.

Para siempre tuya,
Con todo mi amor`,
      date: "2024-01-15",
      category: "amor",
      isRead: true,
    },
    {
      id: 2,
      title: "Recordando nuestro primer beso",
      content: `¬øRecuerdas ese momento m√°gico bajo las estrellas?

Era una noche perfecta, la brisa suave acariciaba nuestros rostros mientras camin√°bamos por el parque. De repente, te detuviste y me miraste con esos ojos que me robaron el aliento desde el primer d√≠a.

El tiempo se detuvo cuando nuestros labios se encontraron por primera vez. Fue como si todo el universo hubiera conspirado para crear ese momento perfecto, solo para nosotros.

Ese beso sell√≥ nuestro destino y marc√≥ el inicio de la aventura m√°s hermosa de nuestras vidas. Cada vez que lo recuerdo, mi coraz√≥n se llena de la misma emoci√≥n que sent√≠ esa noche.

Gracias por darme el beso m√°s perfecto del mundo.`,
      date: "2024-02-14",
      category: "recuerdo",
      isRead: false,
    },
    {
      id: 3,
      title: "Nuestros sue√±os por cumplir",
      content: `Mi amor, tengo tantos sue√±os que quiero cumplir contigo...

Quiero viajar por el mundo tomados de la mano, descubrir nuevos lugares y crear recuerdos inolvidables en cada rinc√≥n del planeta. Quiero construir nuestro hogar perfecto, donde cada habitaci√≥n est√© llena de amor y risas.

Sue√±o con las ma√±anas perezosas en las que despertemos abrazados, con las tardes de lluvia leyendo juntos, y con las noches estrelladas planeando nuestro futuro.

Quiero envejecer a tu lado, ver c√≥mo nuestro amor se fortalece con cada a√±o que pase, y crear una familia hermosa llena de amor y felicidad.

Todos estos sue√±os son posibles porque los compartir√© contigo, mi amor eterno.`,
      date: "2024-03-10",
      category: "futuro",
      isRead: true,
    },
  ])

  const [searchQuery, setSearchQuery] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("todas")
  const [showViewer, setShowViewer] = useState(false)
  const [showEditor, setShowEditor] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [currentMessageId, setCurrentMessageId] = useState<number | null>(null)
  const [editingMessage, setEditingMessage] = useState<Message | null>(null)
  const [deleteMessageId, setDeleteMessageId] = useState<number | null>(null)

  const categories = [
    { value: "todas", label: "Todas", emoji: "üìù" },
    { value: "amor", label: "Amor", emoji: "üíï" },
    { value: "motivacion", label: "Motivaci√≥n", emoji: "‚≠ê" },
    { value: "recuerdo", label: "Recuerdos", emoji: "üì∏" },
    { value: "futuro", label: "Futuro", emoji: "üåü" },
    { value: "especial", label: "Especiales", emoji: "‚ú®" },
  ]

  const filteredMessages = messages.filter((message) => {
    const matchesSearch =
      message.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      message.content.toLowerCase().includes(searchQuery.toLowerCase())

    const matchesCategory = selectedCategory === "todas" || message.category === selectedCategory

    return matchesSearch && matchesCategory
  })

  const unreadCount = messages.filter((m) => !m.isRead).length

  const handleOpenMessage = (messageId: number) => {
    setCurrentMessageId(messageId)
    setShowViewer(true)
  }

  const handleNavigateMessage = (direction: "prev" | "next") => {
    const currentIndex = filteredMessages.findIndex((m) => m.id === currentMessageId)
    let newIndex

    if (direction === "prev") {
      newIndex = currentIndex > 0 ? currentIndex - 1 : filteredMessages.length - 1
    } else {
      newIndex = currentIndex < filteredMessages.length - 1 ? currentIndex + 1 : 0
    }

    setCurrentMessageId(filteredMessages[newIndex].id)
  }

  const handleRandomMessage = () => {
    if (filteredMessages.length > 0) {
      const randomIndex = Math.floor(Math.random() * filteredMessages.length)
      setCurrentMessageId(filteredMessages[randomIndex].id)
      setShowViewer(true)
    }
  }

  const handleSaveMessage = (messageData: Omit<Message, "id" | "isRead">) => {
    if (editingMessage) {
      setMessages(messages.map((m) => (m.id === editingMessage.id ? { ...m, ...messageData } : m)))
    } else {
      const newMessage: Message = {
        id: Date.now(),
        ...messageData,
        isRead: false,
      }
      setMessages([newMessage, ...messages])
    }
    setEditingMessage(null)
  }

  const handleEditMessage = (message: Message) => {
    setEditingMessage(message)
    setShowEditor(true)
  }

  const handleDeleteMessage = (messageId: number) => {
    setDeleteMessageId(messageId)
    setShowDeleteModal(true)
  }

  const confirmDelete = () => {
    if (deleteMessageId) {
      setMessages(messages.filter((m) => m.id !== deleteMessageId))
      setDeleteMessageId(null)
      setShowDeleteModal(false)
    }
  }

  const handleMarkAsRead = (messageId: number) => {
    setMessages(messages.map((m) => (m.id === messageId ? { ...m, isRead: true } : m)))
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-white to-rose-50">
      {/* Background texture */}
      <div
        className="fixed inset-0 opacity-5"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fillRule='evenodd'%3E%3Cg fill='%23ec4899' fillOpacity='0.1'%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }}
      />

      <div className="relative z-10 p-6 max-w-6xl mx-auto">
        <PageHeader
          title="Mensajes Especiales"
          description="Un espacio √≠ntimo para nuestros pensamientos m√°s profundos y sentimientos m√°s sinceros"
        />

        {/* Stats and Actions */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8 border border-pink-100">
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div className="flex items-center gap-6">
              <div className="text-center">
                <div className="text-2xl font-bold text-pink-600">{messages.length}</div>
                <div className="text-sm text-gray-600">Mensajes totales</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{unreadCount}</div>
                <div className="text-sm text-gray-600">Sin leer</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">{messages.length - unreadCount}</div>
                <div className="text-sm text-gray-600">Le√≠dos</div>
              </div>
            </div>

            <div className="flex gap-2">
              <Button
                onClick={handleRandomMessage}
                variant="outline"
                className="border-pink-300 text-pink-600 hover:bg-pink-50"
                disabled={filteredMessages.length === 0}
              >
                <Shuffle className="h-4 w-4 mr-2" />
                Mensaje Aleatorio
              </Button>
              <Button onClick={() => setShowEditor(true)} className="bg-pink-600 hover:bg-pink-700">
                <PenTool className="h-4 w-4 mr-2" />
                Escribir Mensaje
              </Button>
            </div>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8 border border-pink-100">
          <div className="flex flex-col md:flex-row gap-4">
            {/* Search */}
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Buscar en mensajes..."
                className="pl-10 border-pink-200 focus:border-pink-400 focus:ring-pink-400"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              {searchQuery && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8"
                  onClick={() => setSearchQuery("")}
                >
                  <X className="h-4 w-4" />
                </Button>
              )}
            </div>

            {/* Category Filter */}
            <div className="flex gap-2 flex-wrap">
              {categories.map((category) => (
                <Button
                  key={category.value}
                  variant={selectedCategory === category.value ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(category.value)}
                  className={
                    selectedCategory === category.value
                      ? "bg-pink-600 hover:bg-pink-700"
                      : "border-pink-300 text-pink-600 hover:bg-pink-50"
                  }
                >
                  <span className="mr-1">{category.emoji}</span>
                  {category.label}
                </Button>
              ))}
            </div>
          </div>
        </div>

        {/* Messages Grid */}
        {filteredMessages.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredMessages.map((message, index) => (
              <MessageCard
                key={message.id}
                message={message}
                index={index}
                onClick={() => handleOpenMessage(message.id)}
                onEdit={() => handleEditMessage(message)}
                onDelete={() => handleDeleteMessage(message.id)}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <BookOpen className="h-16 w-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-600 mb-2">
              {searchQuery || selectedCategory !== "todas" ? "No se encontraron mensajes" : "A√∫n no hay mensajes"}
            </h3>
            <p className="text-gray-500 mb-4">
              {searchQuery || selectedCategory !== "todas"
                ? "Intenta cambiar los filtros de b√∫squeda"
                : "Comienza escribiendo tu primer mensaje especial"}
            </p>
            {!searchQuery && selectedCategory === "todas" && (
              <Button onClick={() => setShowEditor(true)} className="bg-pink-600 hover:bg-pink-700">
                <PenTool className="h-4 w-4 mr-2" />
                Escribir Primer Mensaje
              </Button>
            )}
          </div>
        )}

        {/* Message Viewer Modal */}
        <MessageViewer
          isOpen={showViewer}
          onClose={() => setShowViewer(false)}
          messages={filteredMessages}
          currentMessageId={currentMessageId}
          onNavigate={handleNavigateMessage}
          onMarkAsRead={handleMarkAsRead}
        />

        {/* Message Editor Modal */}
        <MessageEditor
          isOpen={showEditor}
          onClose={() => {
            setShowEditor(false)
            setEditingMessage(null)
          }}
          onSave={handleSaveMessage}
          editingMessage={editingMessage}
        />

        {/* Delete Confirmation Modal */}
        <Dialog open={showDeleteModal} onOpenChange={setShowDeleteModal}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Confirmar eliminaci√≥n</DialogTitle>
              <DialogDescription>
                ¬øEst√°s seguro de que quieres eliminar este mensaje? Esta acci√≥n no se puede deshacer.
              </DialogDescription>
            </DialogHeader>
            <DialogFooter>
              <Button variant="outline" onClick={() => setShowDeleteModal(false)}>
                Cancelar
              </Button>
              <Button variant="destructive" onClick={confirmDelete}>
                Eliminar
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  )
}
